---
- name: Provision a Target Group and an Application Load Balancer
  hosts: localhost
  connection: local
  tasks:

  - name: Import variables
    include_vars: etc/variables.yml

  - name: Create Target Group
    elb_target_group:
      name: "{{ app_name }}"
      protocol: http
      port: 8080
      vpc_id: "{{ vpc_id }}"
      state: present
      modify_targets: no
    register: target_group
    when: ec2_sg_lb_id

  - name: Update variables file with Target Group ARN
    lineinfile:
      path: etc/variables.yml
      regex: '^elb_tg_arn:'
      line: "elb_tg_arn: {{ target_group.target_group_arn }}"

  - name: Create Application Load Balancer
    elb_application_lb:
      name: "{{ app_name }}"
      security_groups: "{{ ec2_sg_lb_id }}"
      subnets:
      - "{{ vpc_subnet_id_1 }}"
      - "{{ vpc_subnet_id_2 }}"
      listeners:
      - Protocol: HTTP
        Port: 80
        DefaultActions:
        - Type: forward
          TargetGroupName: "{{ app_name }}"
        Rules:
        - Conditions: 
          - Field: host-header
            Values: 
            - "{{ route53_zone }}"
          Priority: '1'
          Actions:
          - Type: redirect
            RedirectConfig:
              Host: "www.{{ route53_zone }}"
              Protocol: "#{protocol}"
              Port: "#{port}"
              Path: "/#{path}"
              Query: "#{query}"
              StatusCode: "HTTP_301"
    register: load_balancer

  - name: Update variables file with ELB DNS
    lineinfile:
      path: etc/variables.yml
      regex: '^elb_dns:'
      line: "elb_dns: {{ load_balancer.dns_name }}"

  - name: Update variables file with ELB hosted zone ID
    lineinfile:
      path: etc/variables.yml
      regex: '^elb_zone_id:'
      line: "elb_zone_id: {{ load_balancer.canonical_hosted_zone_id }}"
