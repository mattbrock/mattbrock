---
- name: Create AMI from Staging instance
  #vars:
  #  ansible_ssh_private_key_file: etc/ec2_key.pem
  #hosts: tag_Environment_Staging
  hosts: localhost
  connection: local
  #remote_user: ec2-user
  tasks:

  - name: Import variables
    include_vars: etc/variables.yml

  - name: Create AMI
    ec2_ami:
      instance_id: "{{ ec2_staging_instance_id }}"
      name: Staging
      tags:
        Name: Staging
      device_mapping:
      - device_name: /dev/xvda
        delete_on_termination: yes
      wait: yes
    register: staging_ami

  - name: Update variables file with AMI ID
    lineinfile:
      path: etc/variables.yml
      regex: '^ec2_staging_ami_id:'
      line: "ec2_staging_ami_id: {{ staging_ami.image_id }}"
    #when: staging_instance.changed





  - name: Halt playbook
    meta: end_play

  - name: Update OS
    become: yes
    yum:
      name: "*"
      state: latest

  - name: Install git
    become: yes
    yum:
      name: git-core
      state: latest

  - name: Create webapp folder
    become: yes
    file:
      path: /opt/simple_webapp
      state: directory
      owner: ec2-user
      group: ec2-user

  - name: Clone app from GitHub
    git:
      repo: "https://github.com/mattbrock/simple_webapp.git"
      dest: /opt/simple_webapp
      force: yes

  - name: Copy systemd unit file to correct location
    become: yes
    copy:
      remote_src: yes
      src: /opt/simple_webapp/simple-webapp.service
      dest: /usr/lib/systemd/system/simple-webapp.service
      owner: root
      group: root

#  - name: Remove systemd unit file from original location
#    file:
#      path: /opt/simple_webapp/simple-webapp.service
#      state: absent

  - name: Reload systemd
    become: yes
    systemd:
      daemon_reload: yes

  - name: Enable and start service for app
    become: yes
    service:
      name: simple-webapp
      enabled: yes
      state: restarted
      
    

  - name: Launch Staging instance
    ec2_instance:
      name: Staging
      key_name: "{{ ec2_key_name }}"
      vpc_subnet_id: "{{ vpc_subnet_id }}"
      instance_type: t2.micro
      security_group: "{{ ec2_sg_app_id }}"
      network:
        assign_public_ip: true
      image_id: "{{ ec2_al2_image_id }}"
      tags:
        Environment: Staging
    register: staging_instance

  #- name: Display variable
  #  debug:
  #    var: staging_instance
      
  - name: Update variables file with instance ID
    lineinfile:
      path: etc/variables.yml
      regex: '^ec2_staging_instance_id:'
      line: "ec2_staging_instance_id: {{ staging_instance.instances[0].instance_id }}"
    when: staging_instance.changed

  - name: Update variables file with instance public DNS
    lineinfile:
      path: etc/variables.yml
      regex: '^ec2_staging_instance_public_dns:'
      line: "ec2_staging_instance_public_dns: {{ staging_instance.instances[0].public_dns_name }}"
    when: staging_instance.changed
