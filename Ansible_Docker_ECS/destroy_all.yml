---
- name: Destroy entire infrastructure
  hosts: localhost
  connection: local
  tasks:

  - name: Import variables
    include_vars: etc/variables.yml

  - name: Delete DNS record for root
    route53:
      state: absent
      zone: "{{ route53_zone }}"
      record: "{{ route53_zone }}"
      type: A
      value: "{{ elb_dns }}"
      alias: yes
      alias_hosted_zone_id: "{{ elb_zone_id }}"
      alias_evaluate_target_health: yes

  - name: Delete DNS record for www.
    route53:
      state: absent
      zone: "{{ route53_zone }}"
      record: "www.{{ route53_zone }}"
      type: A
      value: "{{ elb_dns }}"
      alias: yes
      alias_hosted_zone_id: "{{ elb_zone_id }}"
      alias_evaluate_target_health: yes

  - name: Delete ECS service
    ecs_service:
      name: "{{ app_name }}"
      cluster: "{{ app_name }}"
      state: absent
      force_deletion: yes

  # Ansible AWS plugins didn't seem to offer a way of removing all revisions of a task definition
  # so we have to do it like this
  - name: Deregister all ECS task definitions
    shell: for taskdef in $(aws ecs list-task-definitions --query 'taskDefinitionArns[*]' --output text | grep {{ app_name }}) ; do aws ecs deregister-task-definition --task-definition $taskdef ; done

  - name: Delete Application Load Balancer
    elb_application_lb:
      name: "{{ app_name }}"
      state: absent

  - name: Delete Target Group
    elb_target_group:
      name: "{{ app_name }}"
      state: absent

  - name: Terminate all EC2 instances
    ec2_instance:
      state: absent
      filters:
        instance-state-name: running
        tag:Name: ECS
      wait: yes

  - name: Delete ECS cluster
    ecs_cluster:
      name: "{{ app_name }}"
      state: absent

  # Ansible AWS plugins apparently can't force-remove a repository, i.e.
  # remove a repository containing images, so we have to do it like this
  - name: Delete ECR repository
    shell: aws ecr delete-repository --repository-name {{ app_name }} --force
    ignore_errors: yes

  - name: Delete Security Group for ECS container instances
    ec2_group:
      group_id: "{{ ec2_sg_app_id }}"
      state: absent

  - name: Delete Security Group for load balancer
    ec2_group:
      group_id: "{{ ec2_sg_lb_id }}"
      state: absent

  - name: Delete EC2 SSH key
    ec2_key:
      name: "{{ app_name }}"
      state: absent

  - name: Delete ecsInstanceRole
    iam_role:
      name: ecsInstanceRole
      state: absent

  - name: Delete service-linked IAM role for ECS
    command: aws iam delete-service-linked-role --role-name AWSServiceRoleForECS
    ignore_errors: yes

  - name: Delete service-linked IAM role for ELB
    command: aws iam delete-service-linked-role --role-name AWSServiceRoleForElasticLoadBalancing
    ignore_errors: yes
